{
  "version": 4,
  "terraform_version": "1.11.4",
  "serial": 30,
  "lineage": "c8525246-0a99-70a2-252d-a90109dcd028",
  "outputs": {
    "public_ip_1": {
      "value": "13.134.100.88",
      "type": "string"
    },
    "public_ip_2": {
      "value": "18.169.199.140",
      "type": "string"
    },
    "public_ip_3": {
      "value": "13.134.39.127",
      "type": "string"
    },
    "public_ip_4": {
      "value": "3.9.253.71",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data1",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "179b9e275190fcc531fa7adbd76a75cedad76da663778fd2a6c34157d46f96d8",
            "rendered": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-cp1\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "template": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-cp1\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data2",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "ea36e4d978570cae7815732baf96633fda1a6e5a512c66943db8a20774c991aa",
            "rendered": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-node1\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "template": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-node1\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data3",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "59d37e54983f781177354a42a8c1af73d68f70e74c9c9ec2e60e1a7f2c03b447",
            "rendered": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-node2\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "template": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-node2\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data4",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "fa4568fe711a02450336addbe078a7d5eea49c706a97a69ae23f7b24da6bb86e",
            "rendered": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-node3\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "template": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-node3\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "c1-cp1",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-04d0418995f7048a2",
            "arn": "arn:aws:ec2:eu-west-2:524339405707:elastic-ip/eipalloc-04d0418995f7048a2",
            "associate_with_private_ip": null,
            "association_id": "eipassoc-0d9b1aa0bb475d616",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-04d0418995f7048a2",
            "instance": "i-02dc328133f7a11c1",
            "ipam_pool_id": null,
            "network_border_group": "eu-west-2",
            "network_interface": "eni-06e776dd091e958c2",
            "private_dns": "ip-10-0-1-10.eu-west-2.compute.internal",
            "private_ip": "10.0.1.10",
            "ptr_record": "",
            "public_dns": "ec2-13-134-100-88.eu-west-2.compute.amazonaws.com",
            "public_ip": "13.134.100.88",
            "public_ipv4_pool": "amazon",
            "region": "eu-west-2",
            "tags": {
              "Name": "OB1-c1-cp1-eip"
            },
            "tags_all": {
              "Name": "OB1-c1-cp1-eip"
            },
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_instance.c1-cp1",
            "aws_security_group.f5",
            "data.template_file.user_data1",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "c1-node1",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-007daec0adcb1b2c1",
            "arn": "arn:aws:ec2:eu-west-2:524339405707:elastic-ip/eipalloc-007daec0adcb1b2c1",
            "associate_with_private_ip": null,
            "association_id": "eipassoc-01e8d6ff6d863bbdb",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-007daec0adcb1b2c1",
            "instance": "i-0f606838b8dfb82ae",
            "ipam_pool_id": null,
            "network_border_group": "eu-west-2",
            "network_interface": "eni-0224c8bedf10f785f",
            "private_dns": "ip-10-0-1-11.eu-west-2.compute.internal",
            "private_ip": "10.0.1.11",
            "ptr_record": "",
            "public_dns": "ec2-18-169-199-140.eu-west-2.compute.amazonaws.com",
            "public_ip": "18.169.199.140",
            "public_ipv4_pool": "amazon",
            "region": "eu-west-2",
            "tags": {
              "Name": "OB1-c1-node1-eip"
            },
            "tags_all": {
              "Name": "OB1-c1-node1-eip"
            },
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_instance.c1-node1",
            "aws_security_group.f5",
            "data.template_file.user_data2",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "c1-node2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-0d6df41db03be1b70",
            "arn": "arn:aws:ec2:eu-west-2:524339405707:elastic-ip/eipalloc-0d6df41db03be1b70",
            "associate_with_private_ip": null,
            "association_id": "eipassoc-012434b1528a233bb",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-0d6df41db03be1b70",
            "instance": "i-0f53fd2bb739c15ea",
            "ipam_pool_id": null,
            "network_border_group": "eu-west-2",
            "network_interface": "eni-05326af2a1e93dbec",
            "private_dns": "ip-10-0-1-12.eu-west-2.compute.internal",
            "private_ip": "10.0.1.12",
            "ptr_record": "",
            "public_dns": "ec2-13-134-39-127.eu-west-2.compute.amazonaws.com",
            "public_ip": "13.134.39.127",
            "public_ipv4_pool": "amazon",
            "region": "eu-west-2",
            "tags": {
              "Name": "OB1-c1-node2-eip"
            },
            "tags_all": {
              "Name": "OB1-c1-node2-eip"
            },
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_instance.c1-node2",
            "aws_security_group.f5",
            "data.template_file.user_data3",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "c1-node3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-0c9616b9a2865b813",
            "arn": "arn:aws:ec2:eu-west-2:524339405707:elastic-ip/eipalloc-0c9616b9a2865b813",
            "associate_with_private_ip": null,
            "association_id": "eipassoc-093d983a106d2e037",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-0c9616b9a2865b813",
            "instance": "i-024e0b5685ba63e6b",
            "ipam_pool_id": null,
            "network_border_group": "eu-west-2",
            "network_interface": "eni-067835223f3bbcf01",
            "private_dns": "ip-10-0-1-13.eu-west-2.compute.internal",
            "private_ip": "10.0.1.13",
            "ptr_record": "",
            "public_dns": "ec2-3-9-253-71.eu-west-2.compute.amazonaws.com",
            "public_ip": "3.9.253.71",
            "public_ipv4_pool": "amazon",
            "region": "eu-west-2",
            "tags": {
              "Name": "OB1-c1-node3-eip"
            },
            "tags_all": {
              "Name": "OB1-c1-node3-eip"
            },
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_instance.c1-node3",
            "aws_security_group.f5",
            "data.template_file.user_data4",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "c1-cp1",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "ami": "ami-0379821d182aac933",
            "arn": "arn:aws:ec2:eu-west-2:524339405707:instance/i-02dc328133f7a11c1",
            "associate_public_ip_address": false,
            "availability_zone": "eu-west-2a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 2
              }
            ],
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enable_primary_ipv6": null,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "force_destroy": false,
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-02dc328133f7a11c1",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_lifecycle": "",
            "instance_market_options": [],
            "instance_state": "running",
            "instance_type": "t3a.small",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "OB1_keypair",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_group_id": "",
            "placement_partition_number": 0,
            "primary_network_interface": [
              {
                "delete_on_termination": true,
                "network_interface_id": "eni-06e776dd091e958c2"
              }
            ],
            "primary_network_interface_id": "eni-06e776dd091e958c2",
            "private_dns": "ip-10-0-1-10.eu-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.0.1.10",
            "public_dns": "",
            "public_ip": "",
            "region": "eu-west-2",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "tags_all": {},
                "throughput": 0,
                "volume_id": "vol-09c943f212cbba580",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "sg-09241796c6186a01f"
            ],
            "source_dest_check": true,
            "spot_instance_request_id": "",
            "subnet_id": "subnet-0400c7a3ad673837e",
            "tags": {
              "Name": "OB1-c1-cp1"
            },
            "tags_all": {
              "Name": "OB1-c1-cp1"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-cp1\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-09241796c6186a01f"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwicmVhZCI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_security_group.f5",
            "data.template_file.user_data1",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "c1-node1",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "ami": "ami-0379821d182aac933",
            "arn": "arn:aws:ec2:eu-west-2:524339405707:instance/i-0f606838b8dfb82ae",
            "associate_public_ip_address": false,
            "availability_zone": "eu-west-2a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 2
              }
            ],
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enable_primary_ipv6": null,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "force_destroy": false,
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0f606838b8dfb82ae",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_lifecycle": "",
            "instance_market_options": [],
            "instance_state": "running",
            "instance_type": "t3a.small",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "OB1_keypair",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_group_id": "",
            "placement_partition_number": 0,
            "primary_network_interface": [
              {
                "delete_on_termination": true,
                "network_interface_id": "eni-0224c8bedf10f785f"
              }
            ],
            "primary_network_interface_id": "eni-0224c8bedf10f785f",
            "private_dns": "ip-10-0-1-11.eu-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.0.1.11",
            "public_dns": "",
            "public_ip": "",
            "region": "eu-west-2",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "tags_all": {},
                "throughput": 0,
                "volume_id": "vol-023cd21799cd36dc7",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "sg-09241796c6186a01f"
            ],
            "source_dest_check": true,
            "spot_instance_request_id": "",
            "subnet_id": "subnet-0400c7a3ad673837e",
            "tags": {
              "Name": "OB1-c1-node1"
            },
            "tags_all": {
              "Name": "OB1-c1-node1"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-node1\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-09241796c6186a01f"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwicmVhZCI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_security_group.f5",
            "data.template_file.user_data2",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "c1-node2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "ami": "ami-0379821d182aac933",
            "arn": "arn:aws:ec2:eu-west-2:524339405707:instance/i-0f53fd2bb739c15ea",
            "associate_public_ip_address": false,
            "availability_zone": "eu-west-2a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 2
              }
            ],
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enable_primary_ipv6": null,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "force_destroy": false,
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0f53fd2bb739c15ea",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_lifecycle": "",
            "instance_market_options": [],
            "instance_state": "running",
            "instance_type": "t3a.small",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "OB1_keypair",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_group_id": "",
            "placement_partition_number": 0,
            "primary_network_interface": [
              {
                "delete_on_termination": true,
                "network_interface_id": "eni-05326af2a1e93dbec"
              }
            ],
            "primary_network_interface_id": "eni-05326af2a1e93dbec",
            "private_dns": "ip-10-0-1-12.eu-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.0.1.12",
            "public_dns": "",
            "public_ip": "",
            "region": "eu-west-2",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "tags_all": {},
                "throughput": 0,
                "volume_id": "vol-051b6192122e4a729",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "sg-09241796c6186a01f"
            ],
            "source_dest_check": true,
            "spot_instance_request_id": "",
            "subnet_id": "subnet-0400c7a3ad673837e",
            "tags": {
              "Name": "OB1-c1-node2"
            },
            "tags_all": {
              "Name": "OB1-c1-node2"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-node2\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-09241796c6186a01f"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwicmVhZCI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_security_group.f5",
            "data.template_file.user_data3",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "c1-node3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "ami": "ami-0379821d182aac933",
            "arn": "arn:aws:ec2:eu-west-2:524339405707:instance/i-024e0b5685ba63e6b",
            "associate_public_ip_address": false,
            "availability_zone": "eu-west-2a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 2
              }
            ],
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enable_primary_ipv6": null,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "force_destroy": false,
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-024e0b5685ba63e6b",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_lifecycle": "",
            "instance_market_options": [],
            "instance_state": "running",
            "instance_type": "t3a.small",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "OB1_keypair",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_group_id": "",
            "placement_partition_number": 0,
            "primary_network_interface": [
              {
                "delete_on_termination": true,
                "network_interface_id": "eni-067835223f3bbcf01"
              }
            ],
            "primary_network_interface_id": "eni-067835223f3bbcf01",
            "private_dns": "ip-10-0-1-13.eu-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.0.1.13",
            "public_dns": "",
            "public_ip": "",
            "region": "eu-west-2",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "tags_all": {},
                "throughput": 0,
                "volume_id": "vol-015098a2345900144",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "sg-09241796c6186a01f"
            ],
            "source_dest_check": true,
            "spot_instance_request_id": "",
            "subnet_id": "subnet-0400c7a3ad673837e",
            "tags": {
              "Name": "OB1-c1-node3"
            },
            "tags_all": {
              "Name": "OB1-c1-node3"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "#!/bin/bash\n# Set the Hostname for the host (Change for each host in the cluster)\nsudo hostname c1-node3\n\n# Host configuration startup script\n# Configures /etc/hosts with cluster nodes\n\n# Backup existing hosts file\ncp /etc/hosts /etc/hosts.backup\n\n# Add cluster hosts to /etc/hosts\ncat \u003e\u003e /etc/hosts \u003c\u003c 'EOF'\n\n# Cluster nodes\n10.0.1.10    c1-cp1\n10.0.1.11    c1-node1\n10.0.1.12    c1-node2\n10.0.1.13    c1-node3\nEOF\n\n# Log completion\necho \"$(date): Host configuration completed\" \u003e\u003e /var/log/startup-script.log\n\n# Optional: Display the updated hosts file for verification\necho \"Updated /etc/hosts file:\" \u003e\u003e /var/log/startup-script.log\ncat /etc/hosts \u003e\u003e /var/log/startup-script.log\n\n#Setup \n#   1. 4 VMs Ubuntu 22.04, 1 control plane, 3 nodes.\n#   2. Static IPs on individual VMs\n#   3. /etc/hosts hosts file includes name to IP mappings for VMs\n#   4. Swap is disabled\n\n#0 - Disable swap, swapoff then edit your fstab removing any entry for swap partitions\n#You can recover the space with fdisk. You may want to reboot to ensure your config is ok. \nsudo swapoff -a\n#vi /etc/fstab\n\n#0 - Install Packages \n#containerd prerequisites, and load two modules and configure them to load on boot\n#https://kubernetes.io/docs/setup/production-environment/container-runtimes/\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# sysctl params required by setup, params persist across reboots\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n\n#Install containerd...\nsudo apt-get update\nsudo apt-get clean\nsudo apt-get autoremove\nsudo apt-get install -y containerd\n\n#Create a containerd configuration file\nsudo mkdir -p /etc/containerd\n\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n\n#Set the cgroup driver for containerd to systemd which is required for the kubelet.\n#For more information on this config file see:\n# https://github.com/containerd/cri/blob/master/docs/config.md and also\n# https://github.com/containerd/containerd/blob/master/docs/ops.md\n\n#At the end of this section, change SystemdCgroup = false to SystemdCgroup = true\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        ...\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\n\n#You can use sed to swap in true\nsudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml\n\n#Verify the change was made\n#grep 'SystemdCgroup = true' /etc/containerd/config.toml\n\n#Restart containerd with the new configuration\nsudo systemctl restart containerd\n\n#Install Kubernetes packages - kubeadm, kubelet and kubectl\n#Add k8s.io's apt repository gpg key, this will likely change for each version of kubernetes release. \nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n#Add the Kubernetes apt repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n#Update the package list and use apt-cache policy to inspect versions available in the repository\nsudo apt-get update\n#apt-cache policy kubelet | head -n 20 \n\n#Try to pick one version back because later in this series, we'll run an upgrade\nVERSION=1.34.0-1.1\nsudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION \nsudo apt-mark hold kubelet kubeadm kubectl containerd\n",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-09241796c6186a01f"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwicmVhZCI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_security_group.f5",
            "data.template_file.user_data4",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "f5",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:security-group/sg-09241796c6186a01f",
            "description": "Managed by Terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-09241796c6186a01f",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "name": "OB1-f5",
            "name_prefix": "",
            "owner_id": "524339405707",
            "region": "eu-west-2",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "OB1-SecurityGroup1"
            },
            "tags_all": {
              "Name": "OB1-SecurityGroup1"
            },
            "timeouts": null,
            "vpc_id": "vpc-01c9fdee8d2ce451c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_default_network_acl",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:network-acl/acl-0f97a3823bc46c614",
            "default_network_acl_id": "acl-0f97a3823bc46c614",
            "egress": [
              {
                "action": "allow",
                "cidr_block": "",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "::/0",
                "protocol": "-1",
                "rule_no": 101,
                "to_port": 0
              },
              {
                "action": "allow",
                "cidr_block": "0.0.0.0/0",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 100,
                "to_port": 0
              }
            ],
            "id": "acl-0f97a3823bc46c614",
            "ingress": [
              {
                "action": "allow",
                "cidr_block": "",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "::/0",
                "protocol": "-1",
                "rule_no": 101,
                "to_port": 0
              },
              {
                "action": "allow",
                "cidr_block": "0.0.0.0/0",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 100,
                "to_port": 0
              }
            ],
            "owner_id": "524339405707",
            "region": "eu-west-2",
            "subnet_ids": [
              "subnet-035868523b8543003",
              "subnet-0400c7a3ad673837e"
            ],
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-default",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-default",
              "Terraform": "true"
            },
            "vpc_id": "vpc-01c9fdee8d2ce451c"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_default_route_table",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:route-table/rtb-04bb512a4c345ac6a",
            "default_route_table_id": "rtb-04bb512a4c345ac6a",
            "id": "rtb-04bb512a4c345ac6a",
            "owner_id": "524339405707",
            "propagating_vgws": [],
            "region": "eu-west-2",
            "route": [],
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-default",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-default",
              "Terraform": "true"
            },
            "timeouts": {
              "create": "5m",
              "update": "5m"
            },
            "vpc_id": "vpc-01c9fdee8d2ce451c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsInVwZGF0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_default_security_group",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:security-group/sg-0d5bfea92a683c029",
            "description": "default VPC security group",
            "egress": [],
            "id": "sg-0d5bfea92a683c029",
            "ingress": [],
            "name": "default",
            "name_prefix": "",
            "owner_id": "524339405707",
            "region": "eu-west-2",
            "revoke_rules_on_delete": false,
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-default",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-default",
              "Terraform": "true"
            },
            "vpc_id": "vpc-01c9fdee8d2ce451c"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_eip",
      "name": "nat",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-050a84c8daec8f5dc",
            "arn": "arn:aws:ec2:eu-west-2:524339405707:elastic-ip/eipalloc-050a84c8daec8f5dc",
            "associate_with_private_ip": null,
            "association_id": "eipassoc-0d26220e3b7aa5eb9",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-050a84c8daec8f5dc",
            "instance": "",
            "ipam_pool_id": null,
            "network_border_group": "eu-west-2",
            "network_interface": "eni-013d5b326aa99dba1",
            "private_dns": "ip-10-0-1-111.eu-west-2.compute.internal",
            "private_ip": "10.0.1.111",
            "ptr_record": "",
            "public_dns": "ec2-13-134-100-14.eu-west-2.compute.amazonaws.com",
            "public_ip": "13.134.100.14",
            "public_ipv4_pool": "amazon",
            "region": "eu-west-2",
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-eu-west-2a",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-eu-west-2a",
              "Terraform": "true"
            },
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.vpc.aws_internet_gateway.this",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:internet-gateway/igw-0654a5aa5745ed1d1",
            "id": "igw-0654a5aa5745ed1d1",
            "owner_id": "524339405707",
            "region": "eu-west-2",
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc_id": "vpc-01c9fdee8d2ce451c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allocation_id": "eipalloc-050a84c8daec8f5dc",
            "association_id": "eipassoc-0d26220e3b7aa5eb9",
            "connectivity_type": "public",
            "id": "nat-03718299b0c7e75ba",
            "network_interface_id": "eni-013d5b326aa99dba1",
            "private_ip": "10.0.1.111",
            "public_ip": "13.134.100.14",
            "region": "eu-west-2",
            "secondary_allocation_ids": [],
            "secondary_private_ip_address_count": 0,
            "secondary_private_ip_addresses": [],
            "subnet_id": "subnet-0400c7a3ad673837e",
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-eu-west-2a",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-eu-west-2a",
              "Terraform": "true"
            },
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTgwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.vpc.aws_eip.nat",
            "module.vpc.aws_internet_gateway.this",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "private_nat_gateway",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "",
            "id": "r-rtb-005371044973818151080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "nat-03718299b0c7e75ba",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "region": "eu-west-2",
            "route_table_id": "rtb-00537104497381815",
            "state": "active",
            "timeouts": {
              "create": "5m",
              "delete": null,
              "update": null
            },
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_eip.nat",
            "module.vpc.aws_internet_gateway.this",
            "module.vpc.aws_nat_gateway.this",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "public_internet_gateway",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "carrier_gateway_id": "",
            "core_network_arn": "",
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "igw-0654a5aa5745ed1d1",
            "id": "r-rtb-03b1e49f31f1e25701080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "region": "eu-west-2",
            "route_table_id": "rtb-03b1e49f31f1e2570",
            "state": "active",
            "timeouts": {
              "create": "5m",
              "delete": null,
              "update": null
            },
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_internet_gateway.this",
            "module.vpc.aws_route_table.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:route-table/rtb-00537104497381815",
            "id": "rtb-00537104497381815",
            "owner_id": "524339405707",
            "propagating_vgws": [],
            "region": "eu-west-2",
            "route": [
              {
                "carrier_gateway_id": "",
                "cidr_block": "0.0.0.0/0",
                "core_network_arn": "",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "nat-03718299b0c7e75ba",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-private-eu-west-2a",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-private-eu-west-2a",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc_id": "vpc-01c9fdee8d2ce451c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:route-table/rtb-03b1e49f31f1e2570",
            "id": "rtb-03b1e49f31f1e2570",
            "owner_id": "524339405707",
            "propagating_vgws": [],
            "region": "eu-west-2",
            "route": [
              {
                "carrier_gateway_id": "",
                "cidr_block": "0.0.0.0/0",
                "core_network_arn": "",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "igw-0654a5aa5745ed1d1",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-public",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-public",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc_id": "vpc-01c9fdee8d2ce451c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-010184b475ad766f5",
            "region": "eu-west-2",
            "route_table_id": "rtb-00537104497381815",
            "subnet_id": "subnet-035868523b8543003",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-0896a60bb5282d196",
            "region": "eu-west-2",
            "route_table_id": "rtb-03b1e49f31f1e2570",
            "subnet_id": "subnet-0400c7a3ad673837e",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_route_table.public",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:subnet/subnet-035868523b8543003",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "eu-west-2a",
            "availability_zone_id": "euw2-az2",
            "cidr_block": "10.0.2.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-035868523b8543003",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "524339405707",
            "private_dns_hostname_type_on_launch": "ip-name",
            "region": "eu-west-2",
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-private-eu-west-2a",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-private-eu-west-2a",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc_id": "vpc-01c9fdee8d2ce451c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:subnet/subnet-0400c7a3ad673837e",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "eu-west-2a",
            "availability_zone_id": "euw2-az2",
            "cidr_block": "10.0.1.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0400c7a3ad673837e",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "524339405707",
            "private_dns_hostname_type_on_launch": "ip-name",
            "region": "eu-west-2",
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-public-eu-west-2a",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc-public-eu-west-2a",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc_id": "vpc-01c9fdee8d2ce451c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:524339405707:vpc/vpc-01c9fdee8d2ce451c",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.0.0.0/16",
            "default_network_acl_id": "acl-0f97a3823bc46c614",
            "default_route_table_id": "rtb-04bb512a4c345ac6a",
            "default_security_group_id": "sg-0d5bfea92a683c029",
            "dhcp_options_id": "dopt-0658343fff1b87354",
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "enable_network_address_usage_metrics": false,
            "id": "vpc-01c9fdee8d2ce451c",
            "instance_tenancy": "default",
            "ipv4_ipam_pool_id": null,
            "ipv4_netmask_length": null,
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_network_border_group": "",
            "ipv6_ipam_pool_id": "",
            "ipv6_netmask_length": 0,
            "main_route_table_id": "rtb-04bb512a4c345ac6a",
            "owner_id": "524339405707",
            "region": "eu-west-2",
            "tags": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "OB1-vpc-teraform",
              "Name": "OB1-f5-vpc",
              "Terraform": "true"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}
